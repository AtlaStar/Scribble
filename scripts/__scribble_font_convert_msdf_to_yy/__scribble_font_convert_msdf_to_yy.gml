function __scribble_font_convert_msdf_to_yy(_resource_name, _json_filename)
{
    var _json_buffer = buffer_load(_json_filename);
    if (_json_buffer < 0) __scribble_error("Could not find \"", _json_filename, "\"\nPlease add it to the project's Included Files");
    
    var _json_string = buffer_read(_json_buffer, buffer_text);
    buffer_delete(_json_buffer);
    var _json = json_parse(_json_string);
    
    var _json_glyph_array = _json.glyphs;
    
    var _em_size = _json.atlas.size;
    var _msdf_pxrange = _json.atlas.distanceRange;
    var _atlas_height = _json.atlas.height;
    
    var _output_buffer = buffer_create(1024, buffer_grow, 1);
    
    buffer_write(_output_buffer, buffer_text, "{\n");
    buffer_write(_output_buffer, buffer_text, "  \"hinting\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"glyphOperations\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"interpreter\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"pointRounding\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"applyKerning\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"fontName\": \"Scribble MSDF\",\n");
    buffer_write(_output_buffer, buffer_text, "  \"styleName\": \"MSDF\",\n");
    buffer_write(_output_buffer, buffer_text, "  \"size\": " + string(_em_size) + ".0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"bold\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"italic\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"charset\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"AntiAlias\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"first\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"last\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"sampleText\": \"Generated by Scribble\",\n");
    buffer_write(_output_buffer, buffer_text, "  \"includeTTF\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"TTFName\": \"\",\n");
    buffer_write(_output_buffer, buffer_text, "  \"textureGroupId\": {\n");
    buffer_write(_output_buffer, buffer_text, "    \"name\": \"Default\",\n");
    buffer_write(_output_buffer, buffer_text, "    \"path\": \"texturegroups/Default\"\n");
    buffer_write(_output_buffer, buffer_text, "  },\n");
    buffer_write(_output_buffer, buffer_text, "  \"ascenderOffset\": 0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"glyphs\": {\n");
    
    var _i = 0;
    repeat(array_length(_json_glyph_array))
    {
        var _glyph_struct = _json_glyph_array[_i];
        var _plane_struct = _glyph_struct[$ "planeBounds"];
        var _atlas_struct = _glyph_struct[$ "atlasBounds"];
        
        var _ord  = _glyph_struct.unicode;
        var _char = chr(_ord);
        
        if (_atlas_struct != undefined)
        {
            var _tex_l = _atlas_struct.left + 1;
            var _tex_t = _atlas_height - _atlas_struct.top + 1; //This atlas format is weird
            var _tex_r = _atlas_struct.right - 1;
            var _tex_b = _atlas_height - _atlas_struct.bottom - 1;
        }
        else
        {
            var _tex_l = 0;
            var _tex_t = 0;
            var _tex_r = 0;
            var _tex_b = 0;
        }
        
        if (_plane_struct != undefined)
        {
            var _xoffset  = _em_size*_plane_struct.left;
            var _yoffset  = _em_size - _em_size*_plane_struct.top; //So, so weird
            var _xadvance = round(_em_size*_glyph_struct.advance); //_w - _msdf_pxrange - round(_em_size*_plane_map[? "left"]);
        }
        else
        {
            var _xoffset  = 0;
            var _yoffset  = 0;
            var _xadvance = round(_em_size*_glyph_struct.advance);
        }
        
        var _string = "    ";
        _string += "\"" + string(_ord) + "\": {";
        _string += "\"x\":" + string(_tex_l) + ",";
        _string += "\"y\":" + string(_tex_t) + ",";
        _string += "\"w\":" + string(_tex_r - _tex_l) + ",";
        _string += "\"h\":" + string(_tex_b - _tex_t) + ",";
        _string += "\"character\":" + string(_ord) + ",";
        _string += "\"shift\":" + string(_xadvance) + ",";
        _string += "\"offset\":" + string(_xoffset) + ",";
        _string += "},\n";
        
        buffer_write(_output_buffer, buffer_text, _string);
        
        ++_i;
    }
    
    buffer_write(_output_buffer, buffer_text, "  },\n");
    buffer_write(_output_buffer, buffer_text, "  \"kerningPairs\": [],\n");
    buffer_write(_output_buffer, buffer_text, "  \"ranges\": [\n");
    buffer_write(_output_buffer, buffer_text, "    {\"lower\":32,\"upper\":32},\n");
    buffer_write(_output_buffer, buffer_text, "  ],\n");
    buffer_write(_output_buffer, buffer_text, "  \"regenerateBitmap\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"canGenerateBitmap\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"maintainGms1Font\": false,\n");
    buffer_write(_output_buffer, buffer_text, "  \"parent\": {\n");
    buffer_write(_output_buffer, buffer_text, "    \"name\": \"Fonts\",\n");
    buffer_write(_output_buffer, buffer_text, "    \"path\": \"folders/Fonts.yy\",\n");
    buffer_write(_output_buffer, buffer_text, "  },\n");
    buffer_write(_output_buffer, buffer_text, "  \"resourceVersion\": 1.0,\n");
    buffer_write(_output_buffer, buffer_text, "  \"name\": \"" + string(_resource_name) + "\",\n");
    buffer_write(_output_buffer, buffer_text, "  \"tags\": [],\n");
    buffer_write(_output_buffer, buffer_text, "  \"resourceType\": \"GMFont\",\n");
    buffer_write(_output_buffer, buffer_text, "}");
    
    buffer_save(_output_buffer, _resource_name + ".yy");
    buffer_delete(_output_buffer);
}